FROM alpine:latest

# Install required packages
RUN apk add --no-cache \
    bash \
    openssh-client \
    docker-cli \
    curl

# Create necessary directories
RUN mkdir -p /app/cookies /root/.ssh

# Copy the update script
COPY ./scripts/update_cookies.sh /app/
RUN chmod +x /app/update_cookies.sh

# Set working directory
WORKDIR /app

# Create entrypoint script
RUN echo '#!/bin/bash' > /app/entrypoint.sh && \
    echo 'set -e' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo '# Wait for the cookies to be generated' >> /app/entrypoint.sh && \
    echo 'echo "Waiting for cookies to be available..."' >> /app/entrypoint.sh && \
    echo 'while [ ! "$(ls -A /app/cookies 2>/dev/null)" ]; do' >> /app/entrypoint.sh && \
    echo '    sleep 2' >> /app/entrypoint.sh && \
    echo 'done' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo '# Copy and set permissions for SSH key' >> /app/entrypoint.sh && \
    echo 'if [ -f "/app/key.pem" ]; then' >> /app/entrypoint.sh && \
    echo '    echo "Found SSH key at /app/key.pem"' >> /app/entrypoint.sh && \
    echo '    cp "/app/key.pem" /root/.ssh/id_rsa' >> /app/entrypoint.sh && \
    echo '    chmod 600 /root/.ssh/id_rsa' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo '    # Disable host key checking for non-interactive use' >> /app/entrypoint.sh && \
    echo '    echo "StrictHostKeyChecking no" > /root/.ssh/config' >> /app/entrypoint.sh && \
    echo 'else' >> /app/entrypoint.sh && \
    echo '    echo "SSH key not found at /app/key.pem"' >> /app/entrypoint.sh && \
    echo '    exit 1' >> /app/entrypoint.sh && \
    echo 'fi' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo '# If we are running locally (on the same host as the Docker daemon)' >> /app/entrypoint.sh && \
    echo 'if [ "$REMOTE_HOST" = "localhost" ] || [ "$REMOTE_HOST" = "127.0.0.1" ]; then' >> /app/entrypoint.sh && \
    echo '    echo "Running in local mode..."' >> /app/entrypoint.sh && \
    echo '    volume_name="cookies-volume"' >> /app/entrypoint.sh && \
    echo '    echo "Copying cookies to volume $volume_name"' >> /app/entrypoint.sh && \
    echo '    # Get the volume mount point within the Docker daemon' >> /app/entrypoint.sh && \
    echo '    volume_path=$(docker volume inspect --format "{{ .Mountpoint }}" $volume_name)' >> /app/entrypoint.sh && \
    echo '    if [ -z "$volume_path" ]; then' >> /app/entrypoint.sh && \
    echo '        echo "Error: Could not find mount point for volume $volume_name"' >> /app/entrypoint.sh && \
    echo '        exit 1' >> /app/entrypoint.sh && \
    echo '    fi' >> /app/entrypoint.sh && \
    echo '    echo "Volume path: $volume_path"' >> /app/entrypoint.sh && \
    echo '    # Copy the cookies directly to the volume location' >> /app/entrypoint.sh && \
    echo '    # Note: This assumes Docker is running in privileged mode or has access to volume paths' >> /app/entrypoint.sh && \
    echo '    echo "Finding compatible container to help with copy..."' >> /app/entrypoint.sh && \
    echo '    # Find another container that already has the volume mounted' >> /app/entrypoint.sh && \
    echo '    container_id=$(docker ps -q --filter volume=$volume_name | head -n 1)' >> /app/entrypoint.sh && \
    echo '    if [ -n "$container_id" ]; then' >> /app/entrypoint.sh && \
    echo '        echo "Found container $container_id with volume $volume_name"' >> /app/entrypoint.sh && \
    echo '        # Get the mount point inside the container' >> /app/entrypoint.sh && \
    echo '        container_mount=$(docker inspect --format "{{ range .Mounts }}{{ if eq .Name \"$volume_name\" }}{{ .Destination }}{{ end }}{{ end }}" $container_id)' >> /app/entrypoint.sh && \
    echo '        echo "Container mount point: $container_mount"' >> /app/entrypoint.sh && \
    echo '        # Copy files via the container' >> /app/entrypoint.sh && \
    echo '        for file in /app/cookies/*; do' >> /app/entrypoint.sh && \
    echo '            if [ -f "$file" ]; then' >> /app/entrypoint.sh && \
    echo '                filename=$(basename "$file")' >> /app/entrypoint.sh && \
    echo '                echo "Copying $filename..."' >> /app/entrypoint.sh && \
    echo '                cat "$file" | docker exec -i $container_id sh -c "cat > $container_mount/$filename"' >> /app/entrypoint.sh && \
    echo '                docker exec $container_id chown 1000:1000 "$container_mount/$filename"' >> /app/entrypoint.sh && \
    echo '            fi' >> /app/entrypoint.sh && \
    echo '        done' >> /app/entrypoint.sh && \
    echo '        echo "Cookies copied successfully via container $container_id"' >> /app/entrypoint.sh && \
    echo '    else' >> /app/entrypoint.sh && \
    echo '        echo "No containers with this volume found. Will try direct volume copying instead."' >> /app/entrypoint.sh && \
    echo '        # Try to copy files directly to the volume (this may fail depending on Docker configuration)' >> /app/entrypoint.sh && \
    echo '        # Create a small temporary container for copying' >> /app/entrypoint.sh && \
    echo '        docker run --rm -v $volume_name:/volume alpine sh -c "ls -la /volume"' >> /app/entrypoint.sh && \
    echo '        docker run --rm -v $volume_name:/volume alpine sh -c "mkdir -p /volume/test && echo test > /volume/test/test.txt"' >> /app/entrypoint.sh && \
    echo '        echo "Created test file. Attempting actual copy..."' >> /app/entrypoint.sh && \
    echo '        docker run --rm -v $volume_name:/volume alpine ls -la /volume' >> /app/entrypoint.sh && \
    echo '        # Note: We are avoiding the direct path mount that was causing issues' >> /app/entrypoint.sh && \
    echo '        for file in /app/cookies/*; do' >> /app/entrypoint.sh && \
    echo '            if [ -f "$file" ]; then' >> /app/entrypoint.sh && \
    echo '                filename=$(basename "$file")' >> /app/entrypoint.sh && \
    echo '                echo "Copying $filename..."' >> /app/entrypoint.sh && \
    echo '                cat "$file" | docker run --rm -i -v $volume_name:/volume alpine sh -c "cat > /volume/$filename && chmod 644 /volume/$filename && chown 1000:1000 /volume/$filename"' >> /app/entrypoint.sh && \
    echo '            fi' >> /app/entrypoint.sh && \
    echo '        done' >> /app/entrypoint.sh && \
    echo '        echo "Files copied to volume $volume_name"' >> /app/entrypoint.sh && \
    echo '    fi' >> /app/entrypoint.sh && \
    echo 'else' >> /app/entrypoint.sh && \
    echo '    echo "Running in remote mode - transferring to hosts defined in COOKIES_REMOTE_HOSTS..."' >> /app/entrypoint.sh && \
    echo '    # Execute the update script' >> /app/entrypoint.sh && \
    echo '    /app/update_cookies.sh' >> /app/entrypoint.sh && \
    echo 'fi' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo 'echo "Cookie update process completed!"' >> /app/entrypoint.sh

RUN chmod +x /app/entrypoint.sh

ENTRYPOINT ["/app/entrypoint.sh"] 